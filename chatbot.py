# -*- coding: utf-8 -*-
"""chatbot.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1p_K3Kn1BSF9DFdL_MRXshowXpEB65jBV
"""

import re

def message_probability(user_message, recognised_words, required_words=[]):
    message_certainty = 0
    has_required_words = False

    # Counts how many words are present in each predefined message
    for word in user_message:
        if word in recognised_words:
            message_certainty += 1

    # Calculates the percent of recognised words in a user message
    percentage = float(message_certainty)

    # Checks that the required words are in the string
    for word in required_words:
        if word in user_message:
            has_required_words = True
            break

    # Must either have the required words, or be a single response
    if has_required_words:
      return int(percentage * 100)
    else:
      return 0


def check_all_messages(message):
    highest_prob_list = {}

    # Simplifies response creation / adds it to the dict
    def response(bot_response, list_of_words, required_words=[]):
        nonlocal highest_prob_list
        highest_prob_list[bot_response] = message_probability(message, list_of_words, required_words)

    # Responses -------------------------------------------------------------------------------------------------------
    response('Hello!', ['hello', 'hi', 'hey', 'sup', 'heyo'], required_words=['hello', 'hi', 'hey', 'sup', 'heyo'])
    response('See you!', ['bye', 'goodbye'], required_words=['bye', 'goodbye'])
    response('You\'re welcome!', ['thank', 'thanks'], required_words= ['thank', 'thanks'])
    response('Go to the Ear,Nose and Throat  clinic', ['headache','thyroid','swallowing','smelling','taste','Sense' ,'of' ,'smell','nasal','nose','ear','tonsil', 'inflammation','i', 'have','runny ', 'nose','sore', 'thoat','caugh','sneezing','hearing', 'loss','Snoring','obstructive', 'sleep', 'apnea','balance', 'problems','sinus', 'pressure','sinusitis'], required_words=['headache','swallowing','smelling','taste','smell','nasal','ear','tonsil','nose','sinusitis','sinus','balance','apnea','nose','throat','caugh','sneezing','thyroid','hearing','snoring'])
    response('Go to the chest clinic', ['i', 'have','trouble','pain','when', 'breath','shortness','cough','in','out','blood','mucus','not', 'gettig','enough', 'air','wheezing','chest','apnea'], required_words=['apnea','breath','cough','air','wheezing','chest'])
    response('Go to the Skin  clinic', ['i', 'have','severe', 'acne','persistent','rash','hives','scars','eczema','psoriasis','face','skin','warts','hair','nail''signs', 'of', 'aging','varicose','spider', 'veins','vitiligo'], required_words=['vitiligo','spider', 'veins','varicose','aging','nail','hair','warts','skin','face','psoriasis','acne','rash','hives','scars','eczema'])
    response('Go to the gastroenterology clinic', ['diarrhea','stool','esophageal','i', 'have', 'abdominal', 'pain','discomfort','bleeding', 'in', 'the', 'digestive', 'tract','diabetes','constipation','blood', 'pressure','diarrhoea','heartburn','indigestion','stomach','vomiting','ulcers','pancreatitis','hepatitis','gallbladder','colon','anaemia','fatigue','constipation','fever','cramping'], required_words=['blood', 'diarrhea','pressure','diabetes','esophageal','stool','pancreatitis','hepatitis','gallbladder','colon','fatigue','anaemia','constipation','cramping','fever','ulcers','vomiting','stomach','indigestion','heartburn','diarrhoea','constipation','abdominal','tract','digestive'])
    response('Go to the oculist clinic', ['i','have','problem','eye','see'], required_words=['eye','see'])
    response('Go to the orthopedic clinic', ['i','have','problem','back','bone'], required_words=['back','bone'])

    #response('Go to the chest clinic', ['i', 'have','trouble','pain','when', 'breath','shortness','cough','in','out'و'blood'و'mucus'و'not', 'gettig','enough', 'air','wheezing'], required_words=['breath','cough','air','wheezing'])
    best_match = max(highest_prob_list, key=highest_prob_list.get)
    #print(highest_prob_list)
    #print(f'Best match = {best_match} | Score: {highest_prob_list[best_match]}')
    if highest_prob_list[best_match] == 0:
      return "Sorry i can't understand. pleasa try again"
    else:
      return best_match


# Used to get the response
def get_response(user_input):
    split_message = re.split(r'\s+|[,;?!.-]\s*', user_input.lower())
    response = check_all_messages(split_message)
    return response


# Testing the response system
while True:
    inp = input()
    req_Res = get_response(inp)
    print(req_Res)

